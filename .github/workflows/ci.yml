name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate manifest.json
      run: |
        # Check if manifest.json is valid JSON
        python3 -m json.tool auto-tab-organizer-v1.0.0/manifest.json
        
        # Validate required fields
        python3 -c "
        import json
        with open('auto-tab-organizer-v1.0.0/manifest.json') as f:
            manifest = json.load(f)
        
        required_fields = ['manifest_version', 'name', 'version', 'description']
        for field in required_fields:
            if field not in manifest:
                print(f'Missing required field: {field}')
                exit(1)
        
        print('Manifest validation passed')
        "
    
    - name: Check file structure
      run: |
        # Ensure all required files exist
        required_files=(
          "auto-tab-organizer-v1.0.0/manifest.json"
          "auto-tab-organizer-v1.0.0/background.js"
          "auto-tab-organizer-v1.0.0/popup.html"
          "auto-tab-organizer-v1.0.0/popup.js"
          "auto-tab-organizer-v1.0.0/options.html"
          "auto-tab-organizer-v1.0.0/options.js"
          "auto-tab-organizer-v1.0.0/icon.png"
          "auto-tab-organizer-v1.0.0/help.html"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Missing required file: $file"
            exit 1
          fi
        done
        
        echo "All required files present"
    
    - name: Check for sensitive data
      run: |
        # Check for potential API keys or sensitive data
        # Ignore placeholder text and only look for actual patterns
        
        # Check for actual API key patterns (not placeholders)
        if grep -r "sk-[a-zA-Z0-9]{20,}" auto-tab-organizer-v1.0.0/; then
          echo "Warning: Actual API key found in code"
          exit 1
        fi
        
        # Check for actual API key patterns with different prefixes
        if grep -r "sk-ant-[a-zA-Z0-9]{20,}" auto-tab-organizer-v1.0.0/; then
          echo "Warning: Actual Anthropic API key found in code"
          exit 1
        fi
        
        # Check for actual API key patterns with other common prefixes
        if grep -r "pk-[a-zA-Z0-9]{20,}" auto-tab-organizer-v1.0.0/; then
          echo "Warning: Actual API key found in code"
          exit 1
        fi
        
        # Check for actual API key patterns without prefix (32+ character strings)
        if grep -r "[a-zA-Z0-9]{32,}" auto-tab-organizer-v1.0.0/ | grep -v "placeholder"; then
          echo "Warning: Potential API key found in code"
          exit 1
        fi
        
        echo "No sensitive data found"
    
    - name: Validate HTML
      run: |
        # Basic HTML validation
        for html_file in auto-tab-organizer-v1.0.0/*.html; do
          if [ -f "$html_file" ]; then
            echo "Validating $html_file"
            # Check for proper DOCTYPE
            if ! grep -q "<!doctype html>" "$html_file"; then
              echo "Warning: $html_file might not have proper DOCTYPE"
            fi
            # Check for basic HTML structure
            if ! grep -q "<html" "$html_file" || ! grep -q "</html>" "$html_file"; then
              echo "Error: $html_file missing basic HTML structure"
              exit 1
            fi
          fi
        done
        
        echo "HTML validation passed"
    
    - name: Validate JavaScript syntax
      run: |
        # Basic JavaScript syntax validation using node (if available) or simple checks
        for js_file in auto-tab-organizer-v1.0.0/*.js; do
          if [ -f "$js_file" ]; then
            echo "Validating $js_file"
            # Check for basic JavaScript syntax issues
            if grep -q "console\.log" "$js_file"; then
              echo "Warning: $js_file contains console.log statements (consider removing for production)"
            fi
            # Check for obvious syntax errors
            if grep -q "function.*{.*{.*}" "$js_file"; then
              echo "Warning: $js_file might have nested function declarations"
            fi
          fi
        done
        
        echo "JavaScript validation passed"
    
    - name: Check file sizes
      run: |
        # Check that files aren't unreasonably large
        max_size=500000  # 500KB
        
        for file in auto-tab-organizer-v1.0.0/*; do
          if [ -f "$file" ]; then
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
            if [ "$size" -gt "$max_size" ]; then
              echo "Warning: $file is larger than ${max_size} bytes ($size bytes)"
            fi
          fi
        done
        
        echo "File size check passed"
